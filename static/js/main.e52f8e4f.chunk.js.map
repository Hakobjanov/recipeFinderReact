{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","cal","image","ingredients","className","style","recipe","name","map","ingredient","text","src","alt","App","useState","search","setSearch","recipes","setRecipes","querry","setQuerry","useEffect","getRecipe","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","calories","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,MAAQ,wB,qNCiBvEC,EAfA,SAAC,GAA0C,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,YAClC,OACI,yBAAKC,UAAWC,IAAMC,QAClB,wBAAIF,UAAWC,IAAME,MAAQP,GAC7B,4BACKG,EAAYK,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,KAAhB,SAGR,wCAAeT,GACf,yBAAKU,IAAKT,EAAOU,IAAI,GAAGR,UAAWC,IAAMH,UCuDtCW,EAhEH,WAEZ,IAFkB,EAKYC,mBAAS,IALrB,mBAKVC,EALU,KAKFC,EALE,OAMcF,mBAAS,IANvB,mBAMVG,EANU,KAMDC,EANC,OAOYJ,mBAAS,WAPrB,mBAOVK,EAPU,KAOFC,EAPE,KASlBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAZlB,WAYkB,oBAXjB,qCAUK,cACVM,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBT,EAAWS,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJD,2CAAH,qDAkBb,OACE,yBAAKxB,UAAU,OACb,wBAAIA,UAAU,YAAd,oBACA,0BACEA,UAAU,aACV2B,SAZU,SAAAC,GAChBA,EAAEC,iBACFb,EAAUL,GACVC,EAAU,MAUJ,2BACEZ,UAAU,YACV8B,KAAK,OACLC,MAAOpB,EACPqB,SArBW,SAAAJ,GACnBhB,EAAUgB,EAAEK,OAAOF,UAqBb,4BACI/B,UAAU,YACV8B,KAAK,UAFT,WAOJ,yBAAK9B,UAAU,WACVa,EAAQT,KAAI,SAACF,GAAD,OACX,kBAAC,EAAD,CACEgC,IAAKhC,EAAOA,OAAOiC,SACnBvC,MAAOM,EAAOA,OAAOkC,MACrBvC,IAAKK,EAAOA,OAAOiC,SACnBrC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,oBChDnBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.e52f8e4f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1NdOV\",\"name\":\"recipe_name__3igox\",\"image\":\"recipe_image__3Z7BI\"};","import React from 'react';\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = ( { title, cal, image, ingredients } ) => {\r\n    return (\r\n        <div className={style.recipe}>\r\n            <h1 className={style.name}>{ title }</h1>\r\n            <ul>\r\n                {ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}.</li>\r\n                ))}\r\n            </ul>\r\n            <p>Calories: { cal }</p>\r\n            <img src={image} alt='' className={style.image}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipe from './Recipe'\n\nconst App = () => {\n\nconst appId='0be11483';\nconst appKey='04b91d4b0555207fa8226beec7a22d49';\n\nconst [ search, setSearch ] = useState('');\nconst [ recipes, setRecipes ] = useState([]);\nconst [ querry, setQuerry ] = useState('chicken')\n\nuseEffect(() => {\n  getRecipe();\n}, [querry])\n\nconst getRecipe = async () => {\n  const response = await fetch(`https://api.edamam.com/search?q=${querry}&app_id=${appId}&app_key=${appKey}`);\n  const data = await response.json();\n  setRecipes(data.hits);\n  console.log(data.hits)\n}\n\nconst updateSearch = e => {\n  setSearch(e.target.value)\n}\n\nconst getSearch = e => {\n  e.preventDefault();\n  setQuerry(search);\n  setSearch('');\n}\n\n\n  return (\n    <div className='App'>\n      <h1 className='headline'>FIND YOUR RECIPE</h1>\n      <form \n        className='searchForm' \n        onSubmit={getSearch}>\n        <input \n          className='searchBar' \n          type='text' \n          value={search}\n          onChange={updateSearch} />\n        <button \n            className='searchBtn' \n            type='submit'>\n              SEARCH\n          </button>\n      </form>\n\n    <div className='recipes'>\n        {recipes.map((recipe) => (\n          <Recipe \n            key={recipe.recipe.calories}\n            title={recipe.recipe.label}\n            cal={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}/>\n        ))}\n    </div>\n            \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}